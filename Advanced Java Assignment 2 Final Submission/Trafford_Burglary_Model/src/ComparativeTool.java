
import java.io.IOException;
import com.esri.arcgis.addins.desktop.Button;
import com.esri.arcgis.interop.AutomationException;
import javax.swing.JOptionPane;
import com.esri.arcgis.geoprocessing.GeoProcessor;
import com.esri.arcgis.system.VarArray;

/*@(#) ComparativeTool.java 1.0 25 May 2012
*
*Copyright (c) School of Geography.
*University of Leeds, Leeds, West Yorkshire, UK. LS2 9JT.
*All rights reserved.
*
*This code is provided under the Academic Academic Free License v. 3.0.
*For details, please see the site http://www.opensource.org/licenses/AFL-3.0.
*/ 

/**
*The ComparativeTool class implements the same methods as the TraffordBurglaryModel class, although using randomised data generated by the 'RandomPointCreator' class.
*
*This class is used to compare the effectiveness of the Trafford Burglary model with current offence data and randomised offence data. 
*
*@author Nicholas Addis <gy11nja@leeds.ac.uk>
*@version 1.0 25 May 2012
*/
public class ComparativeTool extends Button {		//This declares the public BurglaryComparativeTool class which extends the Button class. 

	private GeoProcessor geoprocessor = null;		//This initialises the value of the Geoprocessor variable; 'geoprocessor'. 
	
	/**
	 * This is the public 'onClick' method.
	 * 
	 * This method is called when the button attached to the tool is clicked.
	 * 
	 * @param void no input parameters.
	 * @return no return.
	 * 
	 * @exception java.io.IOException if there are interop problems.
	 * @exception com.esri.arcgis.interop.AutomationException if the component throws an ArcObjects exception.
	 */
	@Override
	public void onClick() throws IOException, AutomationException {		//The public 'onClick' method is implemented upon the user clicking the button attached to this tool. The method also tries to catch any exceptions that may occur.  
	
		try{		//This sets up a 'try-catch' block to catch any exceptions. 

			this.geoprocessor = new GeoProcessor();		//This sets up the Geoprocessors, which are then used to implement toolbox tools built into ArcGIS. 
	            
			VarArray parameters = new VarArray();		//This sets up the parameters for the tool. 
		
			String inputFeatures = "LAST_WEEK_WK_48_DATA_COMPARATIVE";		//These set up values and locations/ resulting directory paths for the specific parameters within the tool, arranged in the same order as within the tool in Arc toolbox. 
																			//This line is a copy of last week's offences (a copy because whilst it is the same data it is used for a different tool).  
			String distance = "400";		//Buffer distance (in metres).
			String featureClass = "C:\\Users\\Nick\\Documents\\ArcGIS\\Default.gdb\\Export_Output_last_weeks_buffer_comparative";		//Resulting file path and layer name.
			String inputFeatures2 = "TWO_WEEKS_AGO_WK_47_DATA_COMPARATIVE";		//A copy of offences from two weeks ago.
			String featureClass3 = "C:\\Users\\Nick\\Documents\\ArcGIS\\Default.gdb\\Export_Output_two_weeks_ago_buffer_comparative";		//Resulting file path and layer name.
			String inputFeatures3 = "THREE_WEEKS_AGO_WK_46_DATA_COMPARATIVE";		//A copy of offences from three weeks ago.
			String featureClass5 = "C:\\Users\\Nick\\Documents\\ArcGIS\\Default.gdb\\Export_Output_three_weeks_ago_buffer_comparative";		//Resulting file path and layer name.
			String featureLayer = "RandomPoints";		//The layer is created by the RandomPointCreator tool/class and used as the input feature for this tool.
			String featureClass2 = "C:\\Users\\Nick\\Documents\\ArcGIS\\Default.gdb\\Export_Output_high_risk_predicted_randomised";		//Resulting file path and layer name of randomised offences predicted by offences from the last week.
			String featureClass4 = "C:\\Users\\Nick\\Documents\\ArcGIS\\Default.gdb\\Export_Output_high_medium_risk_predicted_randomised";		//Resulting file path and layer name of randomised offences predicted by offences from the last two weeks.
			String featureClass6 = "C:\\Users\\Nick\\Documents\\ArcGIS\\Default.gdb\\Export_Output_all_risk_predicted_randomised";		//Resulting file path and layer name of randomised offences predicted by offences from the last three weeks.
				
			parameters.add(inputFeatures);		//These add each of the above parameters to the tool add-in.
			parameters.add(distance);
			parameters.add(featureClass);
			parameters.add(inputFeatures2);
			parameters.add(featureClass3);
			parameters.add(inputFeatures3);
			parameters.add(featureClass5);
			parameters.add(featureLayer);
			parameters.add(featureClass2);
			parameters.add(featureClass4);
			parameters.add(featureClass6);

			geoprocessor.setOverwriteOutput(true);		//These two lines execute the running of the tool and specify the tool to run. 
			geoprocessor.execute("BurglaryComparativeTool", parameters, null);

			for (int i = 0; i < geoprocessor.getMessageCount(); i++)		//These lines print any messages attached to the tool. 
				JOptionPane.showMessageDialog(null, geoprocessor.getMessage(i));

		} catch (Exception e) {		//This closes the try catch block. 
			JOptionPane.showMessageDialog(null, e.getStackTrace());
			for (int i = 0; i < geoprocessor.getMessageCount(); i++)
				JOptionPane.showMessageDialog(null, geoprocessor.getMessage(i));
		}

	}

}
